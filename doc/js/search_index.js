var search_data = {"index":{"searchIndex":["chessengine","board","cli","elephant","game","invalidmove","king","knight","move","movevalidator","nogameserror","pawn","piece","queen","rook","input","incorrect","[]()","at()","beats_diagonally?()","beats_straight?()","castling()","check?()","commit()","draw()","en_passant_coords()","exists_at?()","fatal_move?()","get_input()","inspect()","king_coords()","move()","move_piece()","moves()","moves()","moves()","moves()","moves()","needs_promotion?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","over?()","pawn_valid_moves()","piece_coordinates()","promotion()","relative_coords()","repeated_move()","rollback()","safe_moves()","set_at()","set_default()","to_s()","valid_move?()","valid_moves()","valid_moves_recursive()"],"longSearchIndex":["chessengine","chessengine::board","chessengine::cli","chessengine::elephant","chessengine::game","chessengine::invalidmove","chessengine::king","chessengine::knight","chessengine::move","chessengine::movevalidator","chessengine::nogameserror","chessengine::pawn","chessengine::piece","chessengine::queen","chessengine::rook","input","input::incorrect","chessengine::game#[]()","chessengine::board#at()","chessengine::piece#beats_diagonally?()","chessengine::piece#beats_straight?()","chessengine::game#castling()","chessengine::game#check?()","chessengine::move#commit()","chessengine::game#draw()","chessengine::movevalidator#en_passant_coords()","chessengine::board#exists_at?()","chessengine::movevalidator#fatal_move?()","input#get_input()","chessengine::piece#inspect()","chessengine::board#king_coords()","chessengine::game#move()","chessengine::board#move_piece()","chessengine::elephant#moves()","chessengine::king#moves()","chessengine::knight#moves()","chessengine::queen#moves()","chessengine::rook#moves()","chessengine::game#needs_promotion?()","chessengine::board::new()","chessengine::cli::new()","chessengine::elephant::new()","chessengine::game::new()","chessengine::king::new()","chessengine::knight::new()","chessengine::move::new()","chessengine::pawn::new()","chessengine::piece::new()","chessengine::queen::new()","chessengine::rook::new()","chessengine::game#over?()","chessengine::movevalidator#pawn_valid_moves()","chessengine::board#piece_coordinates()","chessengine::game#promotion()","chessengine::movevalidator#relative_coords()","chessengine::movevalidator#repeated_move()","chessengine::move#rollback()","chessengine::movevalidator#safe_moves()","chessengine::board#set_at()","chessengine::board#set_default()","chessengine::board#to_s()","chessengine::movevalidator#valid_move?()","chessengine::movevalidator#valid_moves()","chessengine::movevalidator#valid_moves_recursive()"],"info":[["ChessEngine","","ChessEngine.html","",""],["ChessEngine::Board","","ChessEngine/Board.html","","<p>This class provides a data structure for the chess board. It is responsible\nfor storing information about â€¦\n"],["ChessEngine::CLI","","ChessEngine/CLI.html","",""],["ChessEngine::Elephant","","ChessEngine/Elephant.html","",""],["ChessEngine::Game","","ChessEngine/Game.html","",""],["ChessEngine::InvalidMove","","ChessEngine/InvalidMove.html","",""],["ChessEngine::King","","ChessEngine/King.html","",""],["ChessEngine::Knight","","ChessEngine/Knight.html","",""],["ChessEngine::Move","","ChessEngine/Move.html","",""],["ChessEngine::MoveValidator","","ChessEngine/MoveValidator.html","",""],["ChessEngine::NoGamesError","","ChessEngine/NoGamesError.html","",""],["ChessEngine::Pawn","","ChessEngine/Pawn.html","",""],["ChessEngine::Piece","","ChessEngine/Piece.html","",""],["ChessEngine::Queen","","ChessEngine/Queen.html","",""],["ChessEngine::Rook","","ChessEngine/Rook.html","",""],["Input","","Input.html","",""],["Input::Incorrect","","Input/Incorrect.html","",""],["[]","ChessEngine::Game","ChessEngine/Game.html#method-i-5B-5D","(str)",""],["at","ChessEngine::Board","ChessEngine/Board.html#method-i-at","(coordinates)","<p>Returns the piece string on the given position\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">at</span>([<span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">0</span>]) <span class=\"ruby-comment\">#=&gt; Rook:white</span>\n<span class=\"ruby-identifier\">at</span>([<span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">3</span>]) <span class=\"ruby-comment\">#=&gt; nil</span>\n</pre>\n"],["beats_diagonally?","ChessEngine::Piece","ChessEngine/Piece.html#method-i-beats_diagonally-3F","()",""],["beats_straight?","ChessEngine::Piece","ChessEngine/Piece.html#method-i-beats_straight-3F","()",""],["castling","ChessEngine::Game","ChessEngine/Game.html#method-i-castling","(length)",""],["check?","ChessEngine::Game","ChessEngine/Game.html#method-i-check-3F","()",""],["commit","ChessEngine::Move","ChessEngine/Move.html#method-i-commit","()",""],["draw","ChessEngine::Game","ChessEngine/Game.html#method-i-draw","()",""],["en_passant_coords","ChessEngine::MoveValidator","ChessEngine/MoveValidator.html#method-i-en_passant_coords","(from)",""],["exists_at?","ChessEngine::Board","ChessEngine/Board.html#method-i-exists_at-3F","(coordinates)","<p>Checks if the values of <code>coordinates</code> are between 0 and 7\n<p>Example\n\n<pre>exists_at?([0, 0]) #=&gt; true\nexists_at?([8, ...</pre>\n"],["fatal_move?","ChessEngine::MoveValidator","ChessEngine/MoveValidator.html#method-i-fatal_move-3F","(from, to)",""],["get_input","Input","Input.html#method-i-get_input","(input_message, regex = nil, err_message = \"Incorrect input, try again\")",""],["inspect","ChessEngine::Piece","ChessEngine/Piece.html#method-i-inspect","()",""],["king_coords","ChessEngine::Board","ChessEngine/Board.html#method-i-king_coords","(color)","<p>Returns the coordinates of the king of given <code>color</code>\n"],["move","ChessEngine::Game","ChessEngine/Game.html#method-i-move","(string)",""],["move_piece","ChessEngine::Board","ChessEngine/Board.html#method-i-move_piece","(from, to)","<p>Moves the value of <code>from</code> coords to <code>to</code> coords. Sets\nthe value of <code>to</code> to nil\n"],["moves","ChessEngine::Elephant","ChessEngine/Elephant.html#method-i-moves","()",""],["moves","ChessEngine::King","ChessEngine/King.html#method-i-moves","()",""],["moves","ChessEngine::Knight","ChessEngine/Knight.html#method-i-moves","()",""],["moves","ChessEngine::Queen","ChessEngine/Queen.html#method-i-moves","()",""],["moves","ChessEngine::Rook","ChessEngine/Rook.html#method-i-moves","()",""],["needs_promotion?","ChessEngine::Game","ChessEngine/Game.html#method-i-needs_promotion-3F","()",""],["new","ChessEngine::Board","ChessEngine/Board.html#method-c-new","()","<p>Creates an empty 8x8 board as a 2-dimensional array\n"],["new","ChessEngine::CLI","ChessEngine/CLI.html#method-c-new","()",""],["new","ChessEngine::Elephant","ChessEngine/Elephant.html#method-c-new","(color)",""],["new","ChessEngine::Game","ChessEngine/Game.html#method-c-new","()",""],["new","ChessEngine::King","ChessEngine/King.html#method-c-new","(color)",""],["new","ChessEngine::Knight","ChessEngine/Knight.html#method-c-new","(color)",""],["new","ChessEngine::Move","ChessEngine/Move.html#method-c-new","(board, from, to)",""],["new","ChessEngine::Pawn","ChessEngine/Pawn.html#method-c-new","(color)",""],["new","ChessEngine::Piece","ChessEngine/Piece.html#method-c-new","(color)",""],["new","ChessEngine::Queen","ChessEngine/Queen.html#method-c-new","(color)",""],["new","ChessEngine::Rook","ChessEngine/Rook.html#method-c-new","(color)",""],["over?","ChessEngine::Game","ChessEngine/Game.html#method-i-over-3F","()",""],["pawn_valid_moves","ChessEngine::MoveValidator","ChessEngine/MoveValidator.html#method-i-pawn_valid_moves","(from)",""],["piece_coordinates","ChessEngine::Board","ChessEngine/Board.html#method-i-piece_coordinates","(color)","<p>Returns the array of coordinates where pieces of given <code>color</code> a\nlocated\n"],["promotion","ChessEngine::Game","ChessEngine/Game.html#method-i-promotion","(class_name)",""],["relative_coords","ChessEngine::MoveValidator","ChessEngine/MoveValidator.html#method-i-relative_coords","(from, move)",""],["repeated_move","ChessEngine::MoveValidator","ChessEngine/MoveValidator.html#method-i-repeated_move","(from, move, valid_moves = [])",""],["rollback","ChessEngine::Move","ChessEngine/Move.html#method-i-rollback","()",""],["safe_moves","ChessEngine::MoveValidator","ChessEngine/MoveValidator.html#method-i-safe_moves","(from)",""],["set_at","ChessEngine::Board","ChessEngine/Board.html#method-i-set_at","(coordinates, piece)","<p>Sets the board on given coordinates to <code>piece</code>\n"],["set_default","ChessEngine::Board","ChessEngine/Board.html#method-i-set_default","()","<p>Sets the initial board position according to the classic chess rules\n"],["to_s","ChessEngine::Board","ChessEngine/Board.html#method-i-to_s","()","<p>Returns a string containing the board in printable format (uses colorize\ngem to paint the squares)\n"],["valid_move?","ChessEngine::MoveValidator","ChessEngine/MoveValidator.html#method-i-valid_move-3F","(coordinates)",""],["valid_moves","ChessEngine::MoveValidator","ChessEngine/MoveValidator.html#method-i-valid_moves","(from)",""],["valid_moves_recursive","ChessEngine::MoveValidator","ChessEngine/MoveValidator.html#method-i-valid_moves_recursive","(from)",""]]}}